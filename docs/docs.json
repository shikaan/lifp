{
  "version": "v0.4.0 (dfd2cbd)",
  "functions": {
    "math.floor": {
      "description": "Returns the floor of a number.",
      "example": "(math.floor 1.9) ; 1",
      "name": "math.floor"
    },
    "math.ceil": {
      "description": "Returns the ceiling of a number.",
      "example": "(math.ceil 1.1) ; 2",
      "name": "math.ceil"
    },
    "math.max": {
      "description": "Returns the maximum value in a list of numbers.",
      "example": "(math.max (1 2 3)) ; 3",
      "name": "math.max"
    },
    "math.min": {
      "description": "Returns the minimum value in a list of numbers.",
      "example": "(math.min (1 2 3)) ; 1",
      "name": "math.min"
    },
    "string.length": {
      "description": "Returns the length of a string.",
      "example": "(string.length \"hello\") ; 5",
      "name": "string.length"
    },
    "string.join": {
      "description": "Joins a list of strings with a separator.",
      "example": "(string.join \",\" (\"foo\" \"bar\")) ; \"foo,bar\"",
      "name": "string.join"
    },
    "string.slice": {
      "description": "Returns a substring from start to end indices.",
      "example": "(string.slice \"hello\" 1 4) ; \"ell\"",
      "name": "string.slice"
    },
    "string.includes": {
      "description": "Checks if a string contains a substring.",
      "example": "(string.includes \"hello\" \"ell\") ; true",
      "name": "string.includes"
    },
    "string.trim": {
      "description": "Trims whitespace from both ends of a string.",
      "example": "(string.trim \"  hello  \") ; \"hello\"",
      "name": "string.trim"
    },
    "list.count": {
      "description": "Counts elements in a list.",
      "example": "(list.count (1 2)) ; 2",
      "name": "list.count"
    },
    "list.map": {
      "description": "Maps a lambda over a list.",
      "example": "(list.map (fn* (item idx) (+ item idx)) (1 2 3)) ; (1 3 5)",
      "name": "list.map"
    },
    "list.each": {
      "description": "Applies a lambda to each element in a list (for side effects).",
      "example": "(list.each (fn* (item idx) (print item)) (1 2 3)) ; nil",
      "name": "list.each"
    },
    "list.from": {
      "description": "Creates a list from the given arguments.",
      "example": "(list.from 1 2 3) ; (1 2 3)",
      "name": "list.from"
    },
    "list.nth": {
      "description": "Returns the nth element of a list, or nil if out of bounds.",
      "example": "(list.nth 1 (10 20 30)) ; 20",
      "name": "list.nth"
    },
    "list.filter": {
      "description": "Filters a list using a lambda predicate.",
      "example": "(list.filter (fn* (item idx) (> item 0)) (-1 0 1 2)) ; (1 2)",
      "name": "list.filter"
    },
    "+": {
      "description": "Adds numbers together.",
      "example": "(+ 1 2 3) ; 6",
      "name": "+"
    },
    "-": {
      "description": "Subtracts numbers from the first argument.",
      "example": "(- 5 2 1) ; 2",
      "name": "-"
    },
    "*": {
      "description": "Multiplies numbers together.",
      "example": "(* 2 3 4) ; 24",
      "name": "*"
    },
    "/": {
      "description": "Divides the first argument by the rest.",
      "example": "(/ 8 2 2) ; 2",
      "name": "/"
    },
    "%": {
      "description": "Performs division with modulo.",
      "example": "(% 4 2) ; 0",
      "name": "%"
    },
    "=": {
      "description": "Checks if two values are equal.",
      "example": "(= 1 1) ; true",
      "name": "="
    },
    "<": {
      "description": "Checks if the first value is less than the second.",
      "example": "(< 1 2) ; true",
      "name": "<"
    },
    ">": {
      "description": "Checks if the first value is greater than the second.",
      "example": "(> 2 1) ; true",
      "name": ">"
    },
    "!=": {
      "description": "Checks if two values are not equal.",
      "example": "(!= 1 2) ; true",
      "name": "!="
    },
    "<=": {
      "description": "Checks if the first value is less than or equal to the second.",
      "example": "(<= 1 2) ; true",
      "name": "<="
    },
    ">=": {
      "description": "Checks if the first value is greater than or equal to the second.",
      "example": "(>= 2 1) ; true",
      "name": ">="
    },
    "and": {
      "description": "Logical AND for two boolean values.",
      "example": "(and true false) ; false",
      "name": "and"
    },
    "or": {
      "description": "Logical OR for two boolean values.",
      "example": "(or true false) ; true",
      "name": "or"
    },
    "io.stdout": {
      "description": "Stringifies an atom and writes it to stdout. Use `io.print` to format output.",
      "example": "(io.stdout \"hello\")",
      "name": "io.stdout"
    },
    "io.stderr": {
      "description": "Stringifies an atom and writes it to stderr.",
      "example": "(io.stderr \"error\")",
      "name": "io.stderr"
    },
    "io.printf": {
      "description": "Writes a formatted string to stdout. Specifiers:\n - `%s` for strings\n - `%d` for numbers\n - `%i` casts a string to an integer\n - `%f` casts a string to a float",
      "example": "(io.printf \"hello %s %d\" (\"world\" 42))",
      "name": "io.printf"
    },
    "io.readline": {
      "description": "Writes the question on stdout and waits for user input.\n",
      "example": "(io.readline \"What is your favorite food? \") ; \"USER_TYPED_CONTENT\"",
      "name": "io.readline"
    },
    "io.clear": {
      "description": "Clear the console output.\n",
      "example": "(io.clear)",
      "name": "io.clear"
    }
  }
}
