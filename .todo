BUGS
---
  * [ ] `listGet` allows you to go out of bound
  * [ ] When `def!` reallocates the same symbol, it leaks memory (old symbol is not evicted)
  * [ ] `def!` does not return nil when compiled in release mode
  * [ ] special forms are not recognised (type `def!` alone in repl and get error)
  * [ ] defining `fact` from example returns false instead of null

FEATURES
---
  * [ ] Implement CLI
    * [ ] Welcome text in REPL with version as `lifp`
    * [ ] REPL and run as commands
    * [ ] Set memory boundaries with CLI flags (e.g., `--max-ast-memory=1024`)
  * [ ] Compile AST to bytecode
  * [ ] Implement double/float methods in stdlib (math.floor, math.ceil)
  * [ ] Implement string methods in stdlib (string.length, string.join, string.slice, string.includes, string.trim)
  * [ ] Decouple validation from execution
  * [ ] Enforce naming conventions for functions
    * [ ] effectful functions should terminate with !
    * [ ] functions ending in ? should return bool
  * [ ] Enforce immutability
  * [ ] Resizable arena, to allow resizable environments
  * [ ] Tail call optimization
  * [ ] Lexer should know about comments (and discard them)
  * [ ] Auto-generated documentation for standard library
  * [ ] Enum to text for error messages
  * [ ] Currying: `(def! make-adder (fn (x) (fn (y) (+ x y))))\n(make-adder 5)` currently loses context on `x` because of immediate invocation

REFACTORING
---
  * [ ] Special forms should live in the environment like values and closures
  * [ ] Make list methods (and hashmap methods) typesafe (now you can (append
       `node_t` to a `value_list_t` without errors)
  * [ ] Use [`libuv`](https://libuv.org) for non-blocking io
  * [ ] Std should be instantiated only once and pointed around instead of being cloned
  * [ ] Some structs are huge: mostly because we try to colocate most things. Do we need all of that?
        - The only place where we need flexible lists is the tokenizer and parser.
          From that point on all the lists have defined length and should be arrays.
        - Having colocation though helps with copying, listAppend and mapSet, since we don't have
          to follow pointers.

OPEN STUFF
---
* Should std and core (e.g., keywords) be split to allow using lifp without std?
